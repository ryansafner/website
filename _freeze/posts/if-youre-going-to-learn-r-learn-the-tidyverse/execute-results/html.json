{
  "hash": "6f363e248867a1c48450e02ccc999abe",
  "result": {
    "markdown": "---\ntitle: \"If You're Going to Learn R, Learn the Tidyverse\"\ndate: \"2019-10-18\"\ncategories:\n  - rstats\n  - markdown\n  - github\n  - teaching\n  - econometrics\ncode-fold: true\n---\n\n\n\n\nThis is an opinionated post based on how I teach [my undergraduate econometrics course](http://metricsf19.classes.ryansafner.com). It will not be for everybody. The title applies mostly to anyone who wants to do [data science or econometrics](https://ryansafner.com/post/econometrics-data-science-and-causal-inference/) with R. This is the second time I have taught this course with R, and I have changed it around in many ways that I think optimize the process for students. In this post, I'll cover just two major changes:\n\n1.  Learn R before the econometric/statistical theory\n2.  Learn *tidyverse* R, specifically\n\nThe [last time I taught this course](http://ryansafner.com/courses/econ480) (and my first exploration with R), I did neither. Part of this was because I had just learned base R a few months before the course began, and was still learning and discovering new commands as the semester went on. I waited several weeks to introduce R, starting instead with econometric theory and review, and then interspersing bits of R as it became relevant for each task (running regressions, making plots, changing variables, and various different models). While it was fine for most students, there are some changes that will make students' lives easier.\n\nI am still partway through the course, so it remains to be seen if students R skills are more developed by the end of the course (as they wrap up their projects) because they learned a lot of R *first*, versus in bite-sized chunks spread out over the semester.\n\n## `tidyverse` and Opinionated R\n\n> The tidyverse is an opinionated [collection of R packages](https://www.tidyverse.org/packages) designed for data science. All packages share an underlying design philosophy, grammar, and data structures. - [tidyverse.org](https://www.tidyverse.org/)\n\nOne of the common refrains about what is awesome/terrible about R is that there are multiple ways to accomplish the same task. Here is where the opinions begin, so I'll give mine: Code written with tidyverse packages simply looks a lot better and is far easier for *humans* to read, particularly if you follow the [style guidelines](https://style.tidyverse.org/), as I do.\n\nFor example, the following code takes data from the excellent [gapminder](https://github.com/jennybc/gapminder) dataset and package, and subsets the data to:\n\n1.  look only at U.S. observations\n2.  keep only the `year`, `gdpPercap` and `pop` variables\n3.  create a new variable called `GDP` by multiplying `gdpPercap` and `pop`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder1<-gapminder[gapminder$country==\"United States\", c(\"year\", \"gdpPercap\", \"pop\")]\n\ngapminder1$gdp<-gapminder1$gdpPercap*gapminder1$pop\n```\n:::\n\n\nThis is doable in base R, and often requires saving the output as a new object for later use.\n\nBelow, the same procedure is done with `dplyr` and using the pipe `%>%` from `magrittr` (both part of the `tidyverse`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>%\n  filter(country == \"United States\") %>%\n  select(year, gdpPercap, pop) %>%\n  mutate(GDP=gdpPercap * pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n    year gdpPercap       pop     GDP\n   <int>     <dbl>     <int>   <dbl>\n 1  1952    13990. 157553000 2.20e12\n 2  1957    14847. 171984000 2.55e12\n 3  1962    16173. 186538000 3.02e12\n 4  1967    19530. 198712000 3.88e12\n 5  1972    21806. 209896000 4.58e12\n 6  1977    24073. 220239000 5.30e12\n 7  1982    25010. 232187835 5.81e12\n 8  1987    29884. 242803533 7.26e12\n 9  1992    32004. 256894189 8.22e12\n10  1997    35767. 272911760 9.76e12\n11  2002    39097. 287675526 1.12e13\n12  2007    42952. 301139947 1.29e13\n```\n:::\n:::\n\n\nThe beauty of `tidyverse` (particularly `dplyr`, which will be used the most for data wrangling) comes from a few features:\n\n1.  It uses active, common sense, natural language verbs to accomplish most of its tasks. `filter`, `select`, and `mutate` (among others) are easy to understand what is happening at each stage.\n2.  It allows use of the pipe `%>%` to chain commands into a single sequence (and better yet, every time I use a pipe, I start a new line to make code far more readable).\n3.  It *shows* you the output by default and does not store (or overwrite) it anywhere until or unless you assign it to an object. This allows you to preview what your code does before you need to worry about saving it.\n\nNote that this can be done without use of the pipe, and by storing objects, as such:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_US<-filter(gapminder, country == \"United States\")\ngapminder_US<-select(gapminder_US, year, gdpPercap, pop)\ngapminder_US<-mutate(gapminder_US, GDP=gdpPercap * pop)\ngapminder_US\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n    year gdpPercap       pop     GDP\n   <int>     <dbl>     <int>   <dbl>\n 1  1952    13990. 157553000 2.20e12\n 2  1957    14847. 171984000 2.55e12\n 3  1962    16173. 186538000 3.02e12\n 4  1967    19530. 198712000 3.88e12\n 5  1972    21806. 209896000 4.58e12\n 6  1977    24073. 220239000 5.30e12\n 7  1982    25010. 232187835 5.81e12\n 8  1987    29884. 242803533 7.26e12\n 9  1992    32004. 256894189 8.22e12\n10  1997    35767. 272911760 9.76e12\n11  2002    39097. 287675526 1.12e13\n12  2007    42952. 301139947 1.29e13\n```\n:::\n:::\n\n\n[I am not alone in this view.](http://varianceexplained.org/r/teach-tidyverse/) As far as it relates to teaching, the implications are clear: The overwhelming majority of students are new to \"programming\", so they will be frustrated *regardless* of what order the content was taught, or in what flavor of language. They do not need to know the \"base R\" way of doing something just so that they can see that the tidyverse may be better or more efficient - they just need to learn *one* way to accomplish their task, it might as well be (what I think is) the \"better\" one.\n\nSo, I began the course (after two days of overview, why this course is important, useful, etc.) with 4 intensive classes of learning R, and tidyverse specifically. First, a day about base R, second, a day about ggplot2 for data visualization, third, a day of data wrangling with tidyverse, and finally a day about workflow and other tools (mainly r markdown). I cover the basics behind each of them, and what I have learned, below:\n\n## Class 1: Is Base R Necessary?\n\nIt somehow seems more \"pure\" to teach R from the ground up: First we discuss basic R commands, then we build more complicated functions in, then we show how to manipulate data, then we show how to plot, and later: \"oh by the way there are these packages that do all of this more elegantly and in half as many lines of code.\" That is how I taught econometrics last year.\n\nWe need to remember this is a class in econometrics and data analysis that *uses* R, not a class in computer science or the R language. In fact, people with a computer science/programming background seem to find R [particularly annoying as a programming language](https://www.youtube.com/watch?v=6S9r_YbqHy8&feature=youtu.be). It is highly domain-specific (that domain chiefly being statistics), and should be appreciated as such.\n\nIn any case, I still made a point this year to make [my first R-based class](https://metricsf19.classes.ryansafner.com/class/03-class/) entirely about Base R without the bells and whistles.[^1] Students and R-users need to understand some basic syntax of functions, as well as the object-oriented nature of the language. I made sure that they understand the following really well:\n\n[^1]: Though I allude to more complex examples to give them a taste of what's to come!\n\n1.  What are packages, how to find, install, and load them.\n2.  How to get help in R and on the internet for R functions.\n3.  Different types of objects: especially `vector` and `data.frame`\n4.  Different data classes: especially `numeric` and `character`, and how to check them\n5.  Some basic functions for making vectors and for getting statistics (`c()`, `mean()`, `sd()`, etc.)\n6.  The basics of data frames: recognizing each column is a vector, how to summarize them, how to subset by row, column, and element\n\nI try not to go overboard (I omit things like `factor` and `logical` classes, `list` or `matrix` objects) and tell them not to worry too much about manipulating dataframes in Base R, as that is what `tidyverse` will accomplish much more intuitively and efficiently.\n\n## Class 2: Data Visualization with `ggplot2`\n\nThe [second R-class](https://metricsf19.classes.ryansafner.com/class/04-class/) I taught students all about data visualization with `ggplot2`. Not only do I think it is aesthetically superior to anything from Base R,[^2] it also allows students to think about the important elements of a plot, and optimize each one accordingly, with the \"grammar of graphics.\" This is a pretty steep learning curve compared to typing `plot(y,x)` and seeing a scatterplot appear, but in the end, it is worth it.\n\n[^2]: If it was not clear in my posts by now, I have high aesthetic standards.\n\nIn class, I build a few plots layer by layer:\n\n1.  `data`\n2.  `aes`thetics\n3.  `geom`etric objects\n4.  `facets`\n5.  `labels`\n6.  `scale`s\n7.  `theme`\n\nAt each layer, I explain what each layer does and many of the possibilities for each layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg)+\n  aes(x = displ,\n        y = hwy)+\n  geom_point(aes(color = class))+\n  geom_smooth()+\n  facet_wrap(~year)+\n  labs(x = \"Engine Displacement (Liters)\",\n       y = \"Highway MPG\",\n       title = \"Car Mileage and Displacement\",\n       subtitle = \"More Displacement Lowers Highway MPG\",\n       caption = \"Source: EPA\",\n       color = \"Vehicle Class\")+\n  scale_color_viridis_d()+\n  theme_minimal()+\n  theme(text = element_text(family = \"Fira Sans\"),\n        legend.position=\"bottom\")\n```\n\n::: {.cell-output-display}\n![](if-youre-going-to-learn-r-learn-the-tidyverse_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis is also the students' first exposure to `tidyverse`, though it is not yet apparent. My one regret, in retrospect, is that plot layers are combined with `+` instead of `%>%`.[^3] After learning other `tidyverse` packages such as `dplyr`, students would try to add plot layers with `%>%` but I would continuously have to remind them that layers are combined with `+`.\n\n[^3]: I believe this is due to the unique history of `ggplot2` coming before the `tidyverse` was a full idea. Though I hear in future versions, this may be fixed!\n\nRecall, all of this is done well before we cover basic statistics or econometric theory. When I was teaching students *how* to construct various plots with `ggplot2`, this was before they knew *why* they needed a scatterplot or a boxplot.\n\n## Class 3: Data Wrangling with `tidyverse` (mostly `dplyr`)\n\nThe [third class](https://metricsf19.classes.ryansafner.com/class/05-class/) was all about `tidyverse` as a unifying set of packages with a common philosophy and grammar. I did discuss several core packages:\n\n1.  `tibble` for friendlier dataframes[^4]\n2.  `magrittr` for using the pipe `%>%` to chain code together\n3.  `readr` for importing data (mostly `.csv`[^5]\n4.  `tidyr` for reshaping data\n\n[^4]: I simply replaced all dataframes in the course with tibbles\n\n[^5]: And derivative packages such as `readxl` and `haven` for importing other types of data such as `.xlsx` or Stata's `.dat`.\n\nBut the primary focus was on `dplyr` and its verbs:\n\n1.  `filter()` to keep selected observations\n2.  `select()` to keep selected variables\n3.  `arrange()` to reorder observations by a value\n4.  `mutate()` to create new variables\n5.  `summarize()` to create summary statistics\n6.  `group_by()` for performing operations by group\n\nWe worked with gapminder data to accomplish a wide variety of tasks using these commands.\n\n## Class 4: Optimizing Workflow: R Projects and Markdown\n\nThe [fourth and final class](https://metricsf19.classes.ryansafner.com/class/06-class/) dedicated to R was all about optimizing workflow with a few tweaks. I have not used Microsoft Office products in about 10 years (more posts to come later), and in the last year, have migrated **ALL** of my document-preparation (that's research papers, teaching materials, exams, slides, websites, *everything*) to markdown files I write inside of R Studio and track with version control on GitHub.\n\nWhen I show to students that there are other options to Microsoft Word and Powerpoint, their jaws drop, particularly when I show all that you can do with a single plain-text document (integrating text, code, commands, plots, citations and bibliography etc) that exports to pdf, html, slides, and other output. Last semester, after I showed them `R Markdown`, several students told me it was the best thing about the class, and some still use it for other assignments in other classes on their own. This deserves its own series of posts, so for now I will focus on the two or three things I tried to teach students *in addition* to how to use Markdown.\n\nFirst, **R Projects** are absolutely essential. I discovered these late in the game last year, but now realized that they solve far more problems than trying to do without them.\n\nThe #1 unnecessary problem I encounter with students is trying to load data from external sources. The world is not full of tidy pre-cleaned data, or even data that only come in `.csv` formats. `tidyr` is great for that, and so is `readr`, but the problem actually is one of basic file operations on a computer: students (and R) don't know where the data is saved on their computers! Rather than trying to teach them how to write out relative or absolute file paths to locate files on their computer, R Projects solve this problem by setting the default working directory to the folder where the project is stored on their computer. That means that if you store the data file in that folder, you only need to load it (with `readr` or equivalent) with (e.g.) `read_csv(\"thedata.csv\"`), no more worrying about file paths!\n\nI also encourage students to create a logical folder hierarchy within their projects, similar to what I show in [this repository](https://github.com/ryansafner/workflow).\n\nSecond, **version control** with Github. I never actually got around to showing this in class, but a number of students expressed interest in learning how to do this. I feel it's a bit advanced and requires a bit more computing expertise (but not too much, since I'm able to pull it off!), but I use it constantly. Perhaps more posts on this later.\n\nIn any case, after teaching these workflow methods, looking back on the first 3 R classes, I am tempted to just start from scratch with projects and markdown and make students use them from the beginning. Perhaps next year.\n",
    "supporting": [
      "if-youre-going-to-learn-r-learn-the-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}